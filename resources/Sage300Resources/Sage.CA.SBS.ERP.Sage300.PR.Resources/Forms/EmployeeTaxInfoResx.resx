<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Acquired" xml:space="preserve">
    <value>Acquired</value>
  </data>
  <data name="Amount" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="AmountOverride" xml:space="preserve">
    <value>Amount Override</value>
  </data>
  <data name="AmountPercentage" xml:space="preserve">
    <value>Amount/Percentage</value>
  </data>
  <data name="AmountPercentOverride" xml:space="preserve">
    <value>Percent</value>
  </data>
  <data name="AssignTo" xml:space="preserve">
    <value>Assign To</value>
  </data>
  <data name="BlankTaxCode" xml:space="preserve">
    <value>Invalid input. Tax code cannot be blank.</value>
  </data>
  <data name="CalculationBaseOnly" xml:space="preserve">
    <value>Calculation Base Only</value>
  </data>
  <data name="CheckParameters" xml:space="preserve">
    <value>Check Parameters</value>
  </data>
  <data name="ClassSchedule" xml:space="preserve">
    <value>Class Schedule</value>
  </data>
  <data name="ClassSchedules" xml:space="preserve">
    <value>Class Schedules</value>
  </data>
  <data name="Comments" xml:space="preserve">
    <value>Comments</value>
  </data>
  <data name="CopyEmployeeTemplate" xml:space="preserve">
    <value>Copy Employee Template</value>
  </data>
  <data name="CostCenter" xml:space="preserve">
    <value>Cost Center</value>
  </data>
  <data name="Created" xml:space="preserve">
    <value>Created</value>
  </data>
  <data name="DistributionCode" xml:space="preserve">
    <value>Distribution Code</value>
  </data>
  <data name="DistributionCodeDescription" xml:space="preserve">
    <value>Distribution Code Description</value>
  </data>
  <data name="DistributionDetail" xml:space="preserve">
    <value>Distribution Detail</value>
  </data>
  <data name="EFT" xml:space="preserve">
    <value>EFT</value>
  </data>
  <data name="Employee" xml:space="preserve">
    <value>Employee</value>
  </data>
  <data name="EMPPARMCNT" xml:space="preserve">
    <value>INTERNAL USE - Employee Tax Tabl</value>
  </data>
  <data name="EMPPARMVER" xml:space="preserve">
    <value>INTERNAL USE - Employee Tax Tabl</value>
  </data>
  <data name="Entity" xml:space="preserve">
    <value>PR EmployeeTaxInfo</value>
  </data>
  <data name="Entity1" xml:space="preserve">
    <value>PR EmployeeTaxe</value>
  </data>
  <data name="ExtraWithholding" xml:space="preserve">
    <value>Extra Withholding</value>
  </data>
  <data name="FieldDataType" xml:space="preserve">
    <value>Field Data Type</value>
  </data>
  <data name="FieldLength" xml:space="preserve">
    <value>Field Length</value>
  </data>
  <data name="FieldNumber" xml:space="preserve">
    <value>Field Number</value>
  </data>
  <data name="FieldSequenceNumber" xml:space="preserve">
    <value>Field Sequence Number</value>
  </data>
  <data name="FieldUseType" xml:space="preserve">
    <value>Field Use Type</value>
  </data>
  <data name="Garnishment" xml:space="preserve">
    <value>Garnishment</value>
  </data>
  <data name="General" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="Inserted" xml:space="preserve">
    <value>Inserted</value>
  </data>
  <data name="InsertOptionalFields" xml:space="preserve">
    <value>Insert Optional Fields</value>
  </data>
  <data name="INTERNALUSECategory" xml:space="preserve">
    <value>INTERNAL USE - Category</value>
  </data>
  <data name="INTERNALUSEOccasionalTax" xml:space="preserve">
    <value>INTERNAL USE - Occasional Tax</value>
  </data>
  <data name="INTERNALUSEOperationCode" xml:space="preserve">
    <value>INTERNAL USE - Operation Code</value>
  </data>
  <data name="INTERNALUSETaxTableEffecti" xml:space="preserve">
    <value>INTERNAL USE - Tax Table Effecti</value>
  </data>
  <data name="INTERNALUSETaxType" xml:space="preserve">
    <value>INTERNAL USE - Tax Type</value>
  </data>
  <data name="INTERNALUSETemplate" xml:space="preserve">
    <value>INTERNAL USE - Template</value>
  </data>
  <data name="NumberOfDecimals" xml:space="preserve">
    <value>Number of Decimals</value>
  </data>
  <data name="NumberOfOptionalFields" xml:space="preserve">
    <value>Number of Optional Fields</value>
  </data>
  <data name="OptionalFields" xml:space="preserve">
    <value>Optional Fields</value>
  </data>
  <data name="Other" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="Pay" xml:space="preserve">
    <value>Pay</value>
  </data>
  <data name="Percent" xml:space="preserve">
    <value>Percent</value>
  </data>
  <data name="PercentOverride" xml:space="preserve">
    <value>Percent Override</value>
  </data>
  <data name="SelectionList" xml:space="preserve">
    <value>Selection List</value>
  </data>
  <data name="StandardCalculation" xml:space="preserve">
    <value>Standard Calculation</value>
  </data>
  <data name="Tax" xml:space="preserve">
    <value>Tax</value>
  </data>
  <data name="TaxableNoWithholding" xml:space="preserve">
    <value>Taxable, No Withholding</value>
  </data>
  <data name="TaxCode" xml:space="preserve">
    <value>Tax</value>
  </data>
  <data name="TaxDescription" xml:space="preserve">
    <value>Tax Description</value>
  </data>
  <data name="TaxDetails" xml:space="preserve">
    <value>Tax Details</value>
  </data>
  <data name="Taxes" xml:space="preserve">
    <value>Taxes</value>
  </data>
  <data name="TaxField" xml:space="preserve">
    <value>Tax Field</value>
  </data>
  <data name="Updated" xml:space="preserve">
    <value>Updated</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="WithholdingMethod" xml:space="preserve">
    <value>Withholding Method</value>
  </data>
  <data name="WorkLocation" xml:space="preserve">
    <value>Work Location</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllChecks" xml:space="preserve">
    <value>All Checks</value>
  </data>
  <data name="AllCheques" xml:space="preserve">
    <value>Tous les Chèques</value>
  </data>
  <data name="Bank" xml:space="preserve">
    <value>Banque</value>
  </data>
  <data name="BankName" xml:space="preserve">
    <value>Nom de banque</value>
  </data>
  <data name="BankTextboxValidation" xml:space="preserve">
    <value>Entrée invalide. La banque n'est pas définie.</value>
  </data>
  <data name="CalculationSequence" xml:space="preserve">
    <value>Sèquence de calcul</value>
  </data>
  <data name="CheckDate" xml:space="preserve">
    <value>Check Date</value>
  </data>
  <data name="CheckMessage1" xml:space="preserve">
    <value>Message Ligne 1</value>
  </data>
  <data name="CheckMessage2" xml:space="preserve">
    <value>Message Ligne 2</value>
  </data>
  <data name="CheckStockCodes" xml:space="preserve">
    <value>Check Stock Code</value>
  </data>
  <data name="CheckStockDescription" xml:space="preserve">
    <value>Check Stock Description</value>
  </data>
  <data name="ChecksToPost" xml:space="preserve">
    <value>Checks To Post</value>
  </data>
  <data name="ChecksToPrintOrPost" xml:space="preserve">
    <value>Checks To Print Or Post</value>
  </data>
  <data name="ChequeDate" xml:space="preserve">
    <value>Date Chèque</value>
  </data>
  <data name="Class" xml:space="preserve">
    <value>Classe</value>
  </data>
  <data name="Class1" xml:space="preserve">
    <value>Classe 1</value>
  </data>
  <data name="Class2" xml:space="preserve">
    <value>Classe 2</value>
  </data>
  <data name="Class3" xml:space="preserve">
    <value>Classe 3</value>
  </data>
  <data name="Class4" xml:space="preserve">
    <value>Classe 4</value>
  </data>
  <data name="ClassCode" xml:space="preserve">
    <value>Classe</value>
  </data>
  <data name="DetailLevel" xml:space="preserve">
    <value>Niveau de détail</value>
  </data>
  <data name="EarnOrDedInFullDetail" xml:space="preserve">
    <value>gains/retunes en détail</value>
  </data>
  <data name="EarnOrDedSummarizedByTypeAndRate" xml:space="preserve">
    <value>Sommaire gains/retenues par type &amp; taux</value>
  </data>
  <data name="EFTChecksOnly" xml:space="preserve">
    <value>EFT Checks Only</value>
  </data>
  <data name="EFTChequesOnly" xml:space="preserve">
    <value>Chèques EFT Seulment</value>
  </data>
  <data name="EmployeeName" xml:space="preserve">
    <value>Nom de l'employé</value>
  </data>
  <data name="EmployeeNumber" xml:space="preserve">
    <value>N° employé</value>
  </data>
  <data name="EntityPayrollChecks" xml:space="preserve">
    <value>US Payroll Checks</value>
  </data>
  <data name="ExportToPDF" xml:space="preserve">
    <value>Exporter au format PDF</value>
  </data>
  <data name="ExportToPDFMsg" xml:space="preserve">
    <value>Exporter des chèques. Cela peut prendre quelques minutes. Veuillez patienter…</value>
  </data>
  <data name="FiscalPeriodYearLocked" xml:space="preserve">
    <value>La date {0} correspond à la période {1} de l'exercice {2}, qui est verrouillée pour la paie américaine dans le calendrier fiscal des services communs.</value>
  </data>
  <data name="InvalidFiscalPeriodEndDate" xml:space="preserve">
    <value>Entrée invalide. La date « {0} » n'existe pas dans le calendrier fiscal des services communs.</value>
  </data>
  <data name="InvalidPeriodEndDate" xml:space="preserve">
    <value>Il n'y a rien à poster à la date indiquée</value>
  </data>
  <data name="NoChecksToPrintOrPost" xml:space="preserve">
    <value>No Checks To Print Or Post</value>
  </data>
  <data name="NonEFTChecksOnly" xml:space="preserve">
    <value>Non-EFT Checks Only</value>
  </data>
  <data name="NonEFTChequessOnly" xml:space="preserve">
    <value>Chèques Non EFT Seulment</value>
  </data>
  <data name="PayPeriodEndDate" xml:space="preserve">
    <value>Imprimer et valider les chèques jusqu'à la date de fin de la période de paie</value>
  </data>
  <data name="PayrollCheckRunType" xml:space="preserve">
    <value>Processus</value>
  </data>
  <data name="PayrollCheque" xml:space="preserve">
    <value>Payroll Cheques</value>
  </data>
  <data name="PeriodEndDate" xml:space="preserve">
    <value>Date fin de période entrée.</value>
  </data>
  <data name="Print" xml:space="preserve">
    <value>Imprimer/reporter</value>
  </data>
  <data name="PrintAndPost" xml:space="preserve">
    <value>Impr./reporter chèques jusqu'à la date fin de pér.</value>
  </data>
  <data name="PrintChecksUI" xml:space="preserve">
    <value>Chèques de paie</value>
  </data>
  <data name="PrintSINFlag" xml:space="preserve">
    <value>Imprimer NAS masquè</value>
  </data>
  <data name="PrintSSNFlag" xml:space="preserve">
    <value>Print Masked SSN</value>
  </data>
  <data name="SortChecksBy" xml:space="preserve">
    <value>Trier par</value>
  </data>
  <data name="StockType" xml:space="preserve">
    <value>Stock Type</value>
  </data>
  <data name="ThenBy" xml:space="preserve">
    <value>Then By</value>
  </data>
</root>